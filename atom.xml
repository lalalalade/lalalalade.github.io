<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汪海的博客</title>
  
  <subtitle>记录学习与生活</subtitle>
  <link href="https://lalalalade.github.io/atom.xml" rel="self"/>
  
  <link href="https://lalalalade.github.io/"/>
  <updated>2020-12-30T09:07:39.514Z</updated>
  <id>https://lalalalade.github.io/</id>
  
  <author>
    <name>汪海</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回溯法</title>
    <link href="https://lalalalade.github.io/2020/12/30/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    <id>https://lalalalade.github.io/2020/12/30/%E5%9B%9E%E6%BA%AF%E6%B3%95/</id>
    <published>2020-12-30T09:06:39.792Z</published>
    <updated>2020-12-30T09:07:39.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>回溯法是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就<strong>退回一步</strong>重新选择，这种走不通就退回再走的技术为<strong>回溯法</strong>，而满足回溯条件的某个状态的点称为“回溯点”。</p><a id="more"></a><h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><p>问题：在棋盘上放置n个皇后，使得它们互不攻击，此时皇后的攻击范围为同行同列和对角线，要求找出解的个数。</p><p>分析：每个皇后应在不同行不同列且不在对角线上,下面以4皇后为例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> C[n];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ok=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == n) <span class="comment">//递归边界，只要走到这里所有皇后都不冲突</span></span><br><span class="line">        tot++;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line">            C[cur] = i; <span class="comment">//尝试把cur行的皇后放在第i列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cur;j++)&#123;<span class="comment">//检查是否和前面的皇后冲突</span></span><br><span class="line">            <span class="keyword">if</span>(C[cur] == C[j] || <span class="built_in">abs</span>(cur-j) == <span class="built_in">abs</span>(C[cur]-C[j]))&#123;     <span class="comment">//冲突</span></span><br><span class="line">                ok = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok)</span><br><span class="line">        search(cur+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">search(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tot;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;回溯法&quot;&gt;&lt;a href=&quot;#回溯法&quot; class=&quot;headerlink&quot; title=&quot;回溯法&quot;&gt;&lt;/a&gt;回溯法&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;回溯法是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就&lt;strong&gt;退回一步&lt;/strong&gt;重新选择，这种走不通就退回再走的技术为&lt;strong&gt;回溯法&lt;/strong&gt;，而满足回溯条件的某个状态的点称为“回溯点”。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-回溯" scheme="https://lalalalade.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://lalalalade.github.io/2020/12/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://lalalalade.github.io/2020/12/29/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2020-12-29T06:24:32.688Z</published>
    <updated>2020-12-29T07:46:36.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>把整个问题分成多个步骤，在每个步骤都选取<strong>当前步骤</strong>的最优方案，直到所有步骤结束<br>在每一步都不考虑对后续步骤的影响，在后续的步骤中也不改变前面的选择。所以这是局部最优，<strong>不一定</strong>达到整体最优。</p><a id="more"></a><h3 id="硬币问题"><a href="#硬币问题" class="headerlink" title="硬币问题"></a>硬币问题</h3><p>问题描述：某人带着1元，2元，5元三种面值的硬币去购物，硬币的数量不限，他需要支付M元，问怎样支付才能使硬币数量最少？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,money;</span><br><span class="line"><span class="keyword">int</span> ans[NUM] = &#123;<span class="number">0</span>&#125;; <span class="comment">//记录各种硬币的数量</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;money;</span><br><span class="line"><span class="keyword">for</span>(i=NUM<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">ans[i] = money/value[i];</span><br><span class="line">money -= ans[i] * value[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;NUM; i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;value[i]&lt;&lt;<span class="string">&quot;元硬币数&quot;</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h2&gt;&lt;p&gt;把整个问题分成多个步骤，在每个步骤都选取&lt;strong&gt;当前步骤&lt;/strong&gt;的最优方案，直到所有步骤结束&lt;br&gt;在每一步都不考虑对后续步骤的影响，在后续的步骤中也不改变前面的选择。所以这是局部最优，&lt;strong&gt;不一定&lt;/strong&gt;达到整体最优。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-贪心" scheme="https://lalalalade.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://lalalalade.github.io/2020/12/29/DP/"/>
    <id>https://lalalalade.github.io/2020/12/29/DP/</id>
    <published>2020-12-29T02:19:04.805Z</published>
    <updated>2020-12-30T06:23:47.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>问题的最优解如果可以由<strong>子问题</strong>的最优解推导得到，则可以先求解子问题的最优解，在构造原问题的最优解；若子问题有较多的<strong>重复出现</strong>，则可以自底向上从最终子问题向原问题逐步求解。</p><a id="more"></a><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>可分为多个相关子问题，子问题的解被<strong>重复</strong>使用。</p><h4 id="Optimal-substructure（优化子结构）"><a href="#Optimal-substructure（优化子结构）" class="headerlink" title="Optimal substructure（优化子结构）"></a>Optimal substructure（优化子结构）</h4><p>一个问题的优化解包含了子问题的优化解<br>缩小子问题集合，只需那些优化问题中包含的子问题，降低实现复杂性<br>我们可以自下而上的</p><h4 id="Subteties（重叠子问题）"><a href="#Subteties（重叠子问题）" class="headerlink" title="Subteties（重叠子问题）"></a>Subteties（重叠子问题）</h4><p>在问题的求解过程中，很多子问题的解将被多次使用。</p><h3 id="动态规划算法的设计步骤："><a href="#动态规划算法的设计步骤：" class="headerlink" title="动态规划算法的设计步骤："></a>动态规划算法的设计步骤：</h3><p>分析优化解的结构<br>递归地定义最优解的代价<br>自底向上地计算优化解的代价保存之，并获取构造最优解的信息<br>根据构造最优解的信息构造优化解</p><h3 id="动态规划特点："><a href="#动态规划特点：" class="headerlink" title="动态规划特点："></a>动态规划特点：</h3><p>把原始问题划分成一系列子问题；<br>求解每个子问题仅一次，并将其结果保存在一个表中，以后用到时直接存取，不重复计算，节省计算时间<br>自底向上地计算。<br>整体问题最优解取决于子问题的最优解（状态转移方程）（将子问题称为状态，最终状态的求解归结为其他状态的求解）</p><hr><h3 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h3><p>递归法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(maxSum[i][j] != <span class="number">-1</span>)&#123;   <span class="comment">//表示已经计算过这个值了，可以直接取 不用重复计算</span></span><br><span class="line"><span class="keyword">return</span> maxSum[i][j];</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(i == n)&#123;     <span class="comment">//最后一行 </span></span><br><span class="line">maxSum[i][j] = D[i][j];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = MaxSum(i+<span class="number">1</span>,j);</span><br><span class="line"><span class="keyword">int</span> y = MaxSum(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">maxSum[i][j] = max(x,y)+D[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxSum[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;D[i][j];</span><br><span class="line">maxSum[i][j] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递推法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;   <span class="comment">//初始化最后一行 </span></span><br><span class="line">maxSum[n][i] = D[n][i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)&#123;</span><br><span class="line">maxSum[i][j] = max(maxSum[i+<span class="number">1</span>][j],maxSum[i+<span class="number">1</span>][j+<span class="number">1</span>]) + D[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>递归法是<strong>自顶向下</strong>，而动态规划(递推法)是<strong>自底向上</strong>。对于递推法我们还可以进行<strong>空间优化</strong>，将maxSum数组改造为一维数组，再优化，maxSum = D[n],即用D数组最后一行存放结果。</p><hr><h3 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h3><p>有N种物品，每种只有一个。第i中物品的体积为Vi，重量为Wi,选择一些物品装到一个容量为C的背包，使得背包内的物品再总体积不超过M的前提下重量尽量大，1&lt;=N&lt;=100,1&lt;=Vi&lt;=C&lt;=10000,1&lt;=Wi&lt;=1000000。<br>思路：<br>用dp[i][j]表示取前i种物品，使它们总体积不超过j的最优取法取得的价值总和。要求dp[N][C]。<br>递推：dp[i][j] = max(dp[i-1][j],dp[i-1][j-w[i]]+w[i]),前提j&gt;=w,取或不取第i种物品，两者选优。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[N+<span class="number">1</span>][C+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//填表</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=C; j++)&#123; <span class="comment">//j的所有取值范围 </span></span><br><span class="line"><span class="keyword">if</span>(j&lt;v[i])&#123; <span class="comment">//可装体积小于第i件物品的体积 </span></span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j]; <span class="comment">//不装第i件物品 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  <span class="comment">//考虑装不装第i件物品 </span></span><br><span class="line"><span class="keyword">int</span> x = dp[i<span class="number">-1</span>][j];  <span class="comment">//不装第i件物品 </span></span><br><span class="line"><span class="keyword">int</span> y = dp[i<span class="number">-1</span>][j-w[i]] + w[i];  <span class="comment">//装第i件物品 </span></span><br><span class="line">dp[i][j] = x&lt;y ? y : x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用滚动数组优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[C+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=C; j&gt;=<span class="number">1</span>; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= v[i])&#123;</span><br><span class="line">dp[j] = max(dp[j],dp[j-w[i]] + w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列问题"><a href="#最长上升子序列问题" class="headerlink" title="最长上升子序列问题"></a>最长上升子序列问题</h3><p>子问题：求<strong>以ak为终点</strong>的最长上升子序列的长度<br>确定状态：子问题只和数字的<strong>位置</strong>相关。一共N个状态，maxLen(k)表示以ak作为终点的最长上升子序列的长度，那么：初始状态maxLen(k) = 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> maxLen[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">maxLen[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=N; i++)&#123;</span><br><span class="line"><span class="comment">//每次求以第i个数为终点的最长上升子序列的长度 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])&#123;</span><br><span class="line">maxLen[i] = max(maxLen[i],maxLen[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxLen[N];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h3><p>输入两个串s1,s2。设MaxLen(i,j)表示：s1的左边i个字符形成的子串，与s2左边j个字符形成的子串的最长公共子序列的长度。maxLen(i,j)就是本题的状态，假定len1=strlen(s1),len2=strlen(s2)，那么本题就是要求maxLen(len1,len2)<br>显然：maxLen(n,0) = 0 , maxLen(0,n) = 0<br>递推公式：if(s1[i-1] = s2[j-1]) 那么 maxLen(i,j) = maxLen(i-1,j-1) + 1 否则 maxLen(i,j) = max(maxLen(i,j-1),maxLen(i-1,j))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> s2[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> maxLen[<span class="number">1000</span>][<span class="number">1000</span>]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2)&#123;</span><br><span class="line"><span class="keyword">int</span> length1 = <span class="built_in">strlen</span>(s1);  <span class="comment">//s1的长度</span></span><br><span class="line"><span class="keyword">int</span> length2 = <span class="built_in">strlen</span>(s2);  <span class="comment">//S2的长度</span></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=length1; i++)&#123;    <span class="comment">//边缘</span></span><br><span class="line">maxLen[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;=length2; j++)&#123;    <span class="comment">//边缘</span></span><br><span class="line">maxLen[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=length1; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=length2; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1[i<span class="number">-1</span>] == s2[j<span class="number">-1</span>])&#123;   <span class="comment">//如果s1的第i个元素和s2的第j个元素相等</span></span><br><span class="line">maxLen[i][j] = maxLen[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  <span class="comment">//不等</span></span><br><span class="line">maxLen[i][j] = max(maxLen[i][j<span class="number">-1</span>],maxLen[i<span class="number">-1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxLen[length1][length2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;问题的最优解如果可以由&lt;strong&gt;子问题&lt;/strong&gt;的最优解推导得到，则可以先求解子问题的最优解，在构造原问题的最优解；若子问题有较多的&lt;strong&gt;重复出现&lt;/strong&gt;，则可以自底向上从最终子问题向原问题逐步求解。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="-动态规划" scheme="https://lalalalade.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>选择排序和冒泡排序</title>
    <link href="https://lalalalade.github.io/2020/12/28/SelectionSort/"/>
    <id>https://lalalalade.github.io/2020/12/28/SelectionSort/</id>
    <published>2020-12-28T14:15:15.465Z</published>
    <updated>2020-12-28T14:46:04.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序属于<strong>蛮力法</strong>，开始的时候，扫描整个列表，找到它的<strong>最小元素</strong>，然后和<strong>第一个元素</strong>交换，将最小元素放在它最终位置上。然后从第二个元素扫描数组，找到后n-1个元素中的最小元素，和第二个元素交换，n-1遍以后排好序。键的<strong>交换次数</strong>仅为O(n),时间复杂度为O(n2)。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SelectionSort(<span class="keyword">int</span> a[])&#123;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[min])&#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(&amp;a[i],&amp;a[min]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序<strong>比较相邻元素</strong>，如果它们逆序的话交换它们的位置。重复多次以后，最大的元素沉到最底部。第二遍让第二大元素沉下去。直到n-1遍以后，排序完成。键的交换次数<strong>取决于</strong>输入的数，最坏和平均时间复杂度为O(n2)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BubbleSort(<span class="keyword">int</span> a[])&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n<span class="number">-1</span>-i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j+<span class="number">1</span>] &lt; a[j])&#123;</span><br><span class="line">                swap(&amp;a[j],&amp;a[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h2&gt;&lt;p&gt;选择排序属于&lt;strong&gt;蛮力法&lt;/strong&gt;，开始的时候，扫描整个列表，找到它的&lt;strong&gt;最小元素&lt;/strong&gt;，然后和&lt;strong&gt;第一个元素&lt;/strong&gt;交换，将最小元素放在它最终位置上。然后从第二个元素扫描数组，找到后n-1个元素中的最小元素，和第二个元素交换，n-1遍以后排好序。键的&lt;strong&gt;交换次数&lt;/strong&gt;仅为O(n),时间复杂度为O(n2)。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://lalalalade.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://lalalalade.github.io/2020/12/28/HeapSort/"/>
    <id>https://lalalalade.github.io/2020/12/28/HeapSort/</id>
    <published>2020-12-28T14:04:37.242Z</published>
    <updated>2020-12-28T14:12:25.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h2><p>堆（Heap）可以定义为一棵<strong>二叉树</strong>，树的节点中包含键（每个节点一个键），并且满足以下两个条件：（1）这棵二叉树是基本完备的（或者称为<strong>完全二叉树</strong>）（2）<strong>父母优势</strong>，即每个节点的键都要大于或等于它子女的键。<br>堆排序的时间复杂度为O(nlog n)</p><a id="more"></a><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>函数Heapity(int arr[ ], int start, int end)负责构造一个堆，其中start和end参数指明数组的起始和终止位置。<br>函数HeapSort(int arr[ ], int len)负责实现堆排序。<br>函数的具体实现代码见下。</p><h3 id="Heapity函数"><a href="#Heapity函数" class="headerlink" title="Heapity函数"></a>Heapity函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heapity</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dad = start; <span class="comment">//父节点位置</span></span><br><span class="line"><span class="keyword">int</span> son = <span class="number">2</span>*start; <span class="comment">//第一个子节点位置</span></span><br><span class="line"><span class="keyword">while</span>(son &lt;= end)&#123;</span><br><span class="line"><span class="keyword">if</span>(son+<span class="number">1</span> &lt;= end &amp;&amp; arr[son] &lt; arr[son+<span class="number">1</span>])&#123; <span class="comment">//左子节点小于右子节点</span></span><br><span class="line">son+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr[dad] &gt; arr[son])&#123;   <span class="comment">//满足父母优势</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">swap(&amp;arr[dad],&amp;arr[son]); <span class="comment">//交换父节点和较大子节点的数值</span></span><br><span class="line">dad = son;</span><br><span class="line">son = <span class="number">2</span>*dad;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HeapSort函数"><a href="#HeapSort函数" class="headerlink" title="HeapSort函数"></a>HeapSort函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span></span>&#123;  </span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>  i=len/<span class="number">2</span>; i&gt;=<span class="number">1</span>; i--)&#123;  <span class="comment">//从最后一个父节点开始，一直到根</span></span><br><span class="line">Heapity(arr,i,len);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len; i&gt;<span class="number">0</span>; i--)&#123;  <span class="comment">//每次对根节点构建堆，将最大值与最后一位数交换</span></span><br><span class="line">swap(&amp;arr[<span class="number">1</span>],&amp;arr[i]);  <span class="comment">//交换各个堆的最大值和最后一位的值</span></span><br><span class="line">Heapity(arr,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;堆的概念&quot;&gt;&lt;a href=&quot;#堆的概念&quot; class=&quot;headerlink&quot; title=&quot;堆的概念&quot;&gt;&lt;/a&gt;堆的概念&lt;/h2&gt;&lt;p&gt;堆（Heap）可以定义为一棵&lt;strong&gt;二叉树&lt;/strong&gt;，树的节点中包含键（每个节点一个键），并且满足以下两个条件：（1）这棵二叉树是基本完备的（或者称为&lt;strong&gt;完全二叉树&lt;/strong&gt;）（2）&lt;strong&gt;父母优势&lt;/strong&gt;，即每个节点的键都要大于或等于它子女的键。&lt;br&gt;堆排序的时间复杂度为O(nlog n)&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://lalalalade.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://lalalalade.github.io/2020/12/28/QuickSort/"/>
    <id>https://lalalalade.github.io/2020/12/28/QuickSort/</id>
    <published>2020-12-28T12:16:04.747Z</published>
    <updated>2020-12-28T13:29:15.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是另一种基于<strong>分治法</strong>的排序算法，不像归并排序按照元素在数组中的位置对它们进行划分，快速排序按照元素的<strong>值</strong>对它们进行划分。<strong>划分</strong>：对给定数组中的元素重新排列，使得A[s]左边的元素都小于等于A[s],右边的元素都大于等于A[s]。算法的主要工作在划分阶段，而不需要再去合并子问题的解。以下介绍两种划分方法：<strong>Lomuto划分</strong>和<strong>Hoare划分</strong>。</p><a id="more"></a><h3 id="Lomuto划分"><a href="#Lomuto划分" class="headerlink" title="Lomuto划分"></a>Lomuto划分</h3><p>Lomuto划分原理：先设置一个中轴作为基准（一般是数组第一个），设置两个整型变量i和s，算法从左到右扫描数组，若A[i] &gt;= p, i递增即<strong>扩大了</strong>大于p的段，若A[i] &lt; p，则小于p的段需要扩大，这通过<strong>s递增</strong>实现：s指向第一段的最后一个元素，s+=1，再交换A[i]和A[s]，然后i递增，直至全部处理完毕。处理完毕之后，再交换A[s]和p。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lomuto</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = left;</span><br><span class="line"><span class="keyword">int</span> temp = data[left];                   <span class="comment">//把尾数看做基准数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=left; i&lt;right; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(data[i] &lt; temp)&#123;</span><br><span class="line">            s += <span class="number">1</span>;</span><br><span class="line">swap(data[i],data[s]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(data[s],data[left]);</span><br><span class="line"><span class="keyword">return</span> s;                         <span class="comment">//返回基准数的位置 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">int</span> i = Lomuto(left,right);   <span class="comment">//划分 </span></span><br><span class="line">quickSort(left,i<span class="number">-1</span>);             <span class="comment">//分治：i左边的继续划分 </span></span><br><span class="line">quickSort(i+<span class="number">1</span>,right);            <span class="comment">//分治：i右边的继续划分 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hoare划分"><a href="#Hoare划分" class="headerlink" title="Hoare划分"></a>Hoare划分</h3><p>Hoare划分原理：定义两个整型变量i,j分别从数组两端同时开始扫描，i会忽略小于中轴的数，遇到第一个大于等于中轴的数时停止，相应j会忽略大于中轴的数，遇到第一个小于等于中轴的数时停止。此时会有三种情况：<br>1：i和j未相交，即i小于j，那么<strong>交换</strong>A[i]和A[j]的值，对i加一，对j减一，继续扫描。<br>2：i等于j，说明这时i和j都指向了中轴，划分完毕。<br>3：i和j相交，即i大于j，那么交换中轴和A[j]，划分完毕。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hoare</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span>  right)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = A[left];   <span class="comment">//设置中轴</span></span><br><span class="line"><span class="keyword">int</span> i = left+<span class="number">1</span>, j = right;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123; <span class="comment">//只要i&lt;j就还要进行扫描,直到i&gt;=j为止</span></span><br><span class="line"><span class="keyword">while</span>(A[i]&lt;p)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;             <span class="comment">//使i停在第一个大于等于p的位置上</span></span><br><span class="line"><span class="keyword">while</span>(A[j]&gt;p)&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;            <span class="comment">//使j停在第一个小于等于p的位置上</span></span><br><span class="line">swap(A[i],A[j]);</span><br><span class="line">&#125;</span><br><span class="line">swap(A[i],A[j]);     <span class="comment">//当i&gt;=j时撤销最后一次交换 </span></span><br><span class="line">swap(A[left],A[j]);  <span class="comment">//交换中轴和A[j]</span></span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">QuickSort(left,Hoare(left,right)<span class="number">-1</span>);</span><br><span class="line">QuickSort(Hoare(left,right)+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尽管快速排序的平均时间复杂度为O(nlog n)，它是不稳定的，存在最坏情况下时间复杂度为O(n2)的可能。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h2&gt;&lt;p&gt;快速排序是另一种基于&lt;strong&gt;分治法&lt;/strong&gt;的排序算法，不像归并排序按照元素在数组中的位置对它们进行划分，快速排序按照元素的&lt;strong&gt;值&lt;/strong&gt;对它们进行划分。&lt;strong&gt;划分&lt;/strong&gt;：对给定数组中的元素重新排列，使得A[s]左边的元素都小于等于A[s],右边的元素都大于等于A[s]。算法的主要工作在划分阶段，而不需要再去合并子问题的解。以下介绍两种划分方法：&lt;strong&gt;Lomuto划分&lt;/strong&gt;和&lt;strong&gt;Hoare划分&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://lalalalade.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://lalalalade.github.io/2020/12/27/MergeSort/"/>
    <id>https://lalalalade.github.io/2020/12/27/MergeSort/</id>
    <published>2020-12-27T14:38:01.396Z</published>
    <updated>2020-12-28T13:29:15.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是基于<strong>分治法</strong>的一种算法。对于一个需要排序的数组A[0,…,n-1]; 归并排序把它<strong>一分为二</strong>，并对每个子数组递归排序，然后再把这两个排好序的数组合并成一个有序数组。其中tmp数组用于临时存放合并时产生的有顺序的数，最后赋值给需要排序的原数组A。</p><a id="more"></a><p>下面是<strong>合并两个有序子数组</strong>（默认从小到大）的函数<strong>Merge</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> l,<span class="keyword">int</span> m, <span class="keyword">int</span> r, <span class="keyword">int</span> tmp[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pb = <span class="number">0</span>;               <span class="comment">//pb用于按顺序将数字填入tmp数组</span></span><br><span class="line"><span class="keyword">int</span> p1 = l,p2 = m+<span class="number">1</span>;      <span class="comment">//p1,p2分别是两个子数组开始下标</span></span><br><span class="line"><span class="keyword">while</span>(p1 &lt;= m &amp;&amp; p2 &lt;= r)&#123;   <span class="comment">//两个子数组中的数都没有遍历完</span></span><br><span class="line"><span class="keyword">if</span>(a[p1] &lt; a[p2])&#123;</span><br><span class="line">tmp[pb++] = a[p1++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">tmp[pb++] = a[p2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p1 &lt;= m)&#123;        <span class="comment">//p2数组遍历完成，剩下p1数组中的数字都大于p2数组中的数</span></span><br><span class="line">tmp[pb++] = a[p1++];   <span class="comment">//添加到末尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p2 &lt;= r)&#123;        <span class="comment">//p1数组遍历完成，剩下p2数组中的数字都大于p1数组中的数</span></span><br><span class="line">tmp[pb++] = a[p2++];   <span class="comment">//添加到末尾</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;r-l+<span class="number">1</span>; i++)&#123;   <span class="comment">//赋值回原数组，实现了两个有序数组的合并</span></span><br><span class="line">a[l+i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是用于实现<strong>递归调用来排序</strong>的函数<strong>MergeSort</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> tmp[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">MergeSort(a,l,m,tmp);  <span class="comment">//对左半部分归并排序 </span></span><br><span class="line">MergeSort(a,m+<span class="number">1</span>,r,tmp); <span class="comment">//对右半部分归并排序 </span></span><br><span class="line">Merge(a,l,m,r,tmp);   <span class="comment">//合并两部分 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>归并排序在最坏的情况下的键值比较次数十分接近于基于排序算法在理论上能够达到的<strong>最少次数</strong>。平均情况下时间复杂度属于<strong>O(nlog n)</strong>,相比于快速排序和堆排序，它具有<strong>稳定性</strong>。缺点在于需要线性的额外空间，因此只具有理论意义。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;p&gt;归并排序是基于&lt;strong&gt;分治法&lt;/strong&gt;的一种算法。对于一个需要排序的数组A[0,…,n-1]; 归并排序把它&lt;strong&gt;一分为二&lt;/strong&gt;，并对每个子数组递归排序，然后再把这两个排好序的数组合并成一个有序数组。其中tmp数组用于临时存放合并时产生的有顺序的数，最后赋值给需要排序的原数组A。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://lalalalade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://lalalalade.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
